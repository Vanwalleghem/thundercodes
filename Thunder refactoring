%matplotlib inline
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure, show, axes, sci
from matplotlib import cm, colors
from thunder import KMeans, NMF, PCA, RegressionModel, Colorize
import numpy as np
import scipy.io
import math
import itertools
from numpy import amin, amax, ravel, sum, outer, inner, mean, shape, dot, transpose, concatenate, ones, asarray
image = Colorize.image
from scipy import signal
window = signal.gaussian(11, std=3)
sns.set_context('notebook')
sns.set_style('ticks')
plt.ioff()

def analysisNMF( norm,dirnumber,directory,stimparam,numcomp=18):
      
    fig = figure(dpi=300)
    model = NMF(k=numcomp, maxIter=100).fit(norm)
    j=1
    imgs = model.w.pack()
    for i in xrange(0,model.h.T.shape[1],3):
        fig = figure(dpi=300)
        plt.plot(model.h.T[:,i:i+3])
        plt.savefig('/mnt/downloads/'+directory+'/NMF-'+str(dirnumber)+'-'+str(j)+'.png', dpi=300, bbox_inches='tight')
        fig = figure(dpi=300)
        maps = Colorize(cmap='indexed', colors=[ "blue","green","red"], scale=2).transform(imgs[i:i+3])
        plt.imshow(maps);
        plt.savefig('/mnt/downloads/'+directory+'/NMFb-'+str(dirnumber)+'-'+str(j)+'.png', dpi=300, bbox_inches='tight')
        j+=1
        plt.close("all")
    scipy.io.savemat('/mnt/downloads/'+directory+'/NMF-'+str(dirnumber)+'.mat', mdict={'W':imgs,'H':model.h.T}, oned_as='column', do_compression='true')
    
    lst = np.asarray(list(itertools.product([0, 1], repeat=stimparam.shape[0])))
    NMFH=np.transpose(model.h.T)    
    results=[]
    corrMat=np.zeros((shape(NMFH)[0],norm.dims[0],norm.dims[1]),dtype=np.float64)
    for k in range(0,shape(NMFH)[0]):
        result=[]
        ccr=[]
        for j in range(1,shape(lst)[0]):
            combination=np.zeros((1,norm.index.shape[0]),dtype=np.int);
            for i in np.transpose(np.nonzero(lst[j])[0]):
                combination+=stimparam[i]
            cc=np.corrcoef(NMFH[k,:],combination)[0]
            cc=np.delete(cc,0)
            ccr.append(cc)
        result.append(ccr[np.argmax(ccr)])
        result.append(lst[np.argmax(ccr)])
        results.append(result)
        combination=np.zeros((1,norm.index.shape[0]),dtype=np.int);
        for i in np.transpose(np.nonzero(lst[np.argmax(ccr)])[0]):
            combination+=aud8freq[i]  
        corrs = norm.correlate(combination)
        corrMat[k] = corrs.pack()
        
    yplot=int(math.ceil(float(shape(corrMat)[0])/(math.trunc(shape(corrMat)[0]**(0.5)))))
    xplot=math.trunc(shape(corrMat)[0]**(0.5))
    for j in range(0,corrMat.shape[0]):
        plt.subplot(xplot, yplot, j+1);
        plt.imshow(corrMat[j], cmap='RdBu_r')
        ax = plt.gca()
        ax.set_xticklabels([])
        ax.set_yticklabels([])
    scipy.io.savemat('/mnt/downloads/'+directory+'/NMFcorrelation-'+str(dirnumber)+'.mat', mdict={'correlations':corrMat}, oned_as='column', do_compression='true')
    plt.savefig('/mnt/downloads/'+directory+'/NMFcorrelation-'+str(dirnumber)+'.png', dpi=300, bbox_inches='tight')
    
    return

def analysisCorr( norm,dirnumber,directory,stimparam,numcomp=18):
      
    yplot=int(math.ceil(float(stimparam.shape[0])/(math.trunc(stimparam.shape[0]**(0.5)))))
    xplot=math.trunc(stimparam.shape[0]**(0.5))  
    corrMat=np.zeros((stimparam.shape[0],norm.dims[0],norm.dims[1]),dtype=np.float64)
    fig = figure(dpi=300)
    plt.subplots(xplot, yplot, sharex=True, sharey=True)
    for j in range(0,stimparam.shape[0]):
        x = stimparam[j]        
        corrs = norm.correlate(x)
        corrMat[j] = corrs.pack()
        plt.subplot(xplot, yplot, j+1);
        plt.imshow(corrMat[j], cmap='RdBu_r')
        ax = plt.gca()
        ax.set_xticklabels([])
        ax.set_yticklabels([])
    scipy.io.savemat('/mnt/downloads/'+directory+'/correlation-'+str(dirnumber)+'.mat', mdict={'correlations':corrMat}, oned_as='column', do_compression='true')
    plt.savefig('/mnt/downloads/'+directory+'/correlation-'+str(dirnumber)+'.png', dpi=300, bbox_inches='tight')

    return

def analysisPCA( norm,dirnumber,directory,stimparam,numcomp=30):
      
    fig = figure(dpi=300)
    model = PCA(k=numcomp).fit(norm)
    j=1
    imgs = model.scores.pack()
    for i in xrange(0,model.comps.T.shape[1],3):
        fig = figure(dpi=300)
        plt.plot(model.comps.T[:,i:i+3])
        plt.savefig('/mnt/downloads/'+directory+'/PCA-'+str(dirnumber)+'-'+str(j)+'.png', dpi=300, bbox_inches='tight')
        fig = figure(dpi=300)
        maps = Colorize(cmap='indexed', colors=[ "blue","green","red"], scale=2).transform(imgs[i:i+3])
        plt.imshow(maps);
        plt.savefig('/mnt/downloads/'+directory+'/PCAb-'+str(dirnumber)+'-'+str(j)+'.png', dpi=300, bbox_inches='tight')
        j+=1
        plt.close("all")
    scipy.io.savemat('/mnt/downloads/'+directory+'/PCA-'+str(dirnumber)+'.mat', mdict={'W':imgs,'comps':model.comps.T}, oned_as='column', do_compression='true')
    lst = np.asarray(list(itertools.product([0, 1], repeat=stimparam.shape[0])))
    PCAcomps=np.transpose(model.comps.T)    
    results=[]
    corrMat=np.zeros((shape(PCAcomps)[0],norm.dims[0],norm.dims[1]),dtype=np.float64)
    for k in range(0,shape(PCAcomps)[0]):
        result=[]
        ccr=[]
        for j in range(1,shape(lst)[0]):
            combination=np.zeros((1,norm.index.shape[0]),dtype=np.int);
            for i in np.transpose(np.nonzero(lst[j])[0]):
                combination+=stimparam[i]
            cc=np.corrcoef(PCAcomps[k,:],combination)[0]
            cc=np.delete(cc,0)
            ccr.append(cc)
        result.append(ccr[np.argmax(ccr)])
        result.append(lst[np.argmax(ccr)])
        results.append(result)
        combination=np.zeros((1,norm.index.shape[0]),dtype=np.int);
        for i in np.transpose(np.nonzero(lst[np.argmax(ccr)])[0]):
            combination+=aud8freq[i]  
        corrs = norm.correlate(combination)
        corrMat[k] = corrs.pack()
        
    yplot=int(math.ceil(float(shape(corrMat)[0])/(math.trunc(shape(corrMat)[0]**(0.5)))))
    xplot=math.trunc(shape(corrMat)[0]**(0.5))
    for j in range(0,corrMat.shape[0]):
        plt.subplot(xplot, yplot, j+1);
        plt.imshow(corrMat[j], cmap='RdBu_r')
        ax = plt.gca()
        ax.set_xticklabels([])
        ax.set_yticklabels([])
    scipy.io.savemat('/mnt/downloads/'+directory+'/PCAcorrelation-'+str(dirnumber)+'.mat', mdict={'correlations':corrMat}, oned_as='column', do_compression='true')
    plt.savefig('/mnt/downloads/'+directory+'/PCAcorrelation-'+str(dirnumber)+'.png', dpi=300, bbox_inches='tight')
    
    return
