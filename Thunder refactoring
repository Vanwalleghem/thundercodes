%matplotlib inline
from skimage import feature
from math import sqrt
from skimage.morphology import disk, opening
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure, show, axes, sci
from matplotlib import colors
from thunder import NMF, PCA, RegressionModel, Colorize
import numpy as np
from numpy import genfromtxt
from pyfnnd import apply_all_cells
import scipy.io
import math
import itertools
image = Colorize.image
from scipy import signal
window = signal.gaussian(5, std=1)
sns.set_context('notebook')
sns.set_style('ticks')
plt.ioff()
    

def analysisNMF(data_to_analyze,dirnumber,directory,stimparam,numcomp=18,min_radius=2,max_radius=5,radius=3):
    global model
    img_mean=img.mean()
    selem = disk(radius)  
    fig = figure(dpi=300)
    model = NMF(k=numcomp, maxIter=100).fit(data_to_analyze)
    j=1
    imgs = model.w.pack()
    for i in xrange(0,model.h.T.shape[1],3):
        fig = figure(dpi=300)
        plt.plot(model.h.T[:,i:i+3])
        plt.savefig('/mnt/downloads/'+directory+'/NMF-'+str(dirnumber)+'-'+str(j)+'.png', dpi=300, bbox_inches='tight')
        fig = figure(dpi=300)
        maps = Colorize(cmap='indexed', colors=[ "blue","green","red"], scale=2).transform(imgs[i:i+3])
        plt.imshow(maps);
        plt.savefig('/mnt/downloads/'+directory+'/NMFb-'+str(dirnumber)+'-'+str(j)+'.png', dpi=300, bbox_inches='tight')
        j+=1
        plt.close("all")
    scipy.io.savemat('/mnt/downloads/'+directory+'/NMF-'+str(dirnumber)+'.mat', mdict={'W':imgs,'H':model.h.T}, oned_as='column', do_compression='true')
    
    lst = np.asarray(list(itertools.product([0, 1], repeat=stimparam.shape[0])))
    NMFH=np.transpose(model.h.T)    
    results=[]
    corrMat=np.zeros((NMFH.shape[0],data_to_analyze.dims[0],data_to_analyze.dims[1]),dtype=np.float32)
    for k in range(0,NMFH.shape[0]):
        result=[]
        ccr=[]
        for j in range(1,lst.shape[0]):
            combination=np.zeros((1,data_to_analyze.index.shape[0]),dtype=np.int16);
            for i in np.transpose(np.nonzero(lst[j])[0]):
                combination+=stimparam[i]
            cc=np.corrcoef(NMFH[k,:],combination)[0]
            cc=np.delete(cc,0)
            ccr.append(cc)
        result.append(ccr[np.argmax(ccr)])
        result.append(lst[np.argmax(ccr)])
        results.append(result)
        combination=np.zeros((1,data_to_analyze.index.shape[0]),dtype=np.int16);
        for i in np.transpose(np.nonzero(lst[np.argmax(ccr)])[0]):
            combination+=stimparam[i]  
        corrs = data_to_analyze.correlate(combination)
        corrMat[k] = corrs.pack()
        opened = opening(imgs[k], selem)
        blobs_log = feature.blob_log(opened, min_sigma=min_radius, max_sigma=max_radius)
#         if not blobs_log:
#             with open('/mnt/downloads/'+directory+'/image-'+str(dirnumber)+'NMF-'+str(k)+'segmentation.csv', 'a') as outfile:
#                 print('No cells found')
#         else:
        blobs_log[:, 2] = blobs_log[:, 2] * sqrt(2)
        Mask=np.zeros((imgs[k].shape[0],imgs[k].shape[1]),dtype=np.int16)
        i=1
        for blob in blobs_log:
            y, x, r = blob
            y,x = np.ogrid[-y:imgs[k].shape[0]-y, -x:imgs[k].shape[1]-x]
            mask = x*x + y*y <= r*r
            Mask[mask]=i
            i+=1
        fig = figure(dpi=300)
        plt.imshow(Mask)
        plt.savefig('/mnt/downloads/'+directory+'/image-'+str(dirnumber)+'-NMF-'+str(k)+'segmentation.png', dpi=300, bbox_inches='tight')
        propthund=img.meanByRegions(Mask).collectAsArray()
        n_hat, C_hat, LL, theta_hat=apply_all_cells(np.transpose(propthund[1][:,0]),disp=0, n_jobs=-1)
        scipy.io.savemat('/mnt/downloads/'+directory+'/Spikes-NMF'+str(dirnumber)+'-'+str(k)+'.mat', mdict={'n_hat':n_hat,'C_hat':C_hat,'LL':LL,'theta_hat':theta_hat}, oned_as='column', do_compression='true')
        np.savetxt('/mnt/downloads/'+directory+'/image-'+str(dirnumber)+'-NMF-'+str(k)+'segmentation.csv',propthund[1][:,0])    

    with open('/mnt/downloads/'+directory+'/NMFCorrCoef-'+str(dirnumber)+'.txt', 'a') as outfile:
        i=1
        for data_slice in results:
            outfile.write ('NMF-'+str(i)+' CorrCoef' + np.array_str(data_slice[0]).rjust(10) +'Combination of features'+ np.array_str(data_slice[1]))
            outfile.write('\n')
            i+=1        
    yplot=int(math.ceil(float(corrMat.shape[0])/(math.trunc(corrMat.shape[0]**(0.5)))))
    xplot=math.trunc(corrMat.shape[0]**(0.5))
    for j in range(0,corrMat.shape[0]):
        plt.subplot(xplot, yplot, j+1);
        plt.imshow(corrMat[j], cmap='RdBu_r')
        ax = plt.gca()
        ax.set_xticklabels([])
        ax.set_yticklabels([])
    scipy.io.savemat('/mnt/downloads/'+directory+'/NMFcorrelation-'+str(dirnumber)+'.mat', mdict={'correlations':corrMat}, oned_as='column', do_compression='true')
    plt.savefig('/mnt/downloads/'+directory+'/NMFcorrelation-'+str(dirnumber)+'.png', dpi=300, bbox_inches='tight')
    
    return

def analysisCorr( data_to_analyze,dirnumber,directory,stimparam,numcomp=18):
      
    yplot=int(math.ceil(float(stimparam.shape[0])/(math.trunc(stimparam.shape[0]**(0.5)))))
    xplot=math.trunc(stimparam.shape[0]**(0.5))  
    corrMat=np.zeros((stimparam.shape[0],data_to_analyze.dims[0],data_to_analyze.dims[1]),dtype=np.float32)
    fig = figure(dpi=300)
    plt.subplots(xplot, yplot, sharex=True, sharey=True)
    for j in range(0,stimparam.shape[0]):
        x = stimparam[j]        
        corrs = data_to_analyze.correlate(x)
        corrMat[j] = corrs.pack()
        plt.subplot(xplot, yplot, j+1);
        plt.imshow(corrMat[j], cmap='RdBu_r')
        ax = plt.gca()
        ax.set_xticklabels([])
        ax.set_yticklabels([])
    scipy.io.savemat('/mnt/downloads/'+directory+'/correlation-'+str(dirnumber)+'.mat', mdict={'correlations':corrMat}, oned_as='column', do_compression='true')
    plt.savefig('/mnt/downloads/'+directory+'/correlation-'+str(dirnumber)+'.png', dpi=300, bbox_inches='tight')

    return

def analysisPCA( data_to_analyze,dirnumber,directory,stimparam,numcomp=30,min_radius=2,max_radius=5,radius=3):
    global model  
    fig = figure(dpi=300)
    model = PCA(k=numcomp).fit(data_to_analyze)
    j=1
    imgs = model.scores.pack()
    for i in xrange(0,model.comps.T.shape[1],3):
        fig = figure(dpi=300)
        plt.plot(model.comps.T[:,i:i+3])
        plt.savefig('/mnt/downloads/'+directory+'/PCA-'+str(dirnumber)+'-'+str(j)+'.png', dpi=300, bbox_inches='tight')
        fig = figure(dpi=300)
        maps = Colorize(cmap='indexed', colors=[ "blue","green","red"], scale=2).transform(imgs[i:i+3])
        plt.imshow(maps);
        plt.savefig('/mnt/downloads/'+directory+'/PCAb-'+str(dirnumber)+'-'+str(j)+'.png', dpi=300, bbox_inches='tight')
        j+=1
        plt.close("all")
    scipy.io.savemat('/mnt/downloads/'+directory+'/PCA-'+str(dirnumber)+'.mat', mdict={'W':imgs,'comps':model.comps.T}, oned_as='column', do_compression='true')
    lst = np.asarray(list(itertools.product([0, 1], repeat=stimparam.shape[0])))
    PCAcomps=np.transpose(model.comps.T)    
    results=[]
    corrMat=np.zeros((PCAcomps.shape[0],data_to_analyze.dims[0],data_to_analyze.dims[1]),dtype=np.float32)
    for k in range(0,PCAcomps.shape[0]):
        result=[]
        ccr=[]
        for j in range(1,lst.shape[0]):
            combination=np.zeros((1,data_to_analyze.index.shape[0]),dtype=np.int16);
            for i in np.transpose(np.nonzero(lst[j])[0]):
                combination+=stimparam[i]
            cc=np.corrcoef(PCAcomps[k,:],combination)[0]
            cc=np.delete(cc,0)
            ccr.append(cc)
        result.append(ccr[np.argmax(ccr)])
        result.append(lst[np.argmax(ccr)])
        results.append(result)
        combination=np.zeros((1,data_to_analyze.index.shape[0]),dtype=np.int16);
        for i in np.transpose(np.nonzero(lst[np.argmax(ccr)])[0]):
            combination+=stimparam[i]  
        corrs = data_to_analyze.correlate(combination)
        corrMat[k] = corrs.pack()
        opened = opening(imgs[k], selem)
        blobs_log = feature.blob_log(opened, min_sigma=min_radius, max_sigma=max_radius)
        if not blobs_log:
            with open('/mnt/downloads/'+directory+'/image-'+str(dirnumber)+'PCA-'+str(k)+'segmentation.csv', 'a') as outfile:
                print('No cells found') 
        else:
            blobs_log[:, 2] = blobs_log[:, 2] * sqrt(2)
            Mask=np.zeros((imgs[k].shape[0],imgs[k].shape[1]),dtype=np.int16)
            i=1
            for blob in blobs_log:
                y, x, r = blob
                y,x = np.ogrid[-y:imgs[k].shape[0]-y, -x:imgs[k].shape[1]-x]
                mask = x*x + y*y <= r*r
                Mask[mask]=i
                i+=1
            fig = figure(dpi=300)
            plt.imshow(Mask)
            plt.savefig('/mnt/downloads/'+directory+'/image-'+str(dirnumber)+'-PCA-'+str(k)+'segmentation.png', dpi=300, bbox_inches='tight')
            propthund=img.meanByRegions(Mask).collectAsArray()
            n_hat, C_hat, LL, theta_hat=apply_all_cells(np.transpose(propthund[1][:,0]),disp=0, n_jobs=-1)
            scipy.io.savemat('/mnt/downloads/'+directory+'/Spikes-PCA'+str(dirnumber)+'-'+str(k)+'.mat', mdict={'n_hat':n_hat,'C_hat':C_hat,'LL':LL,'theta_hat':theta_hat}, oned_as='column', do_compression='true')
            np.savetxt('/mnt/downloads/'+directory+'/image-'+str(dirnumber)+'-PCA-'+str(k)+'segmentation.csv',propthund[1][:,0])   
        
    with open('/mnt/downloads/'+directory+'/PCACorrCoef-'+str(dirnumber)+'.txt', 'a') as outfile:
        i=1
        for data_slice in results:
            outfile.write ('NMF-'+str(i)+' CorrCoef' + np.array_str(data_slice[0]).rjust(10) +'Combination of features'+ np.array_str(data_slice[1]))
            outfile.write('\n')
            i+=1
      
    
    yplot=int(math.ceil(float(corrMat.shape[0])/(math.trunc(corrMat.shape[0]**(0.5)))))
    xplot=math.trunc(corrMat.shape[0]**(0.5))
    for j in range(0,corrMat.shape[0]):
        plt.subplot(xplot, yplot, j+1);
        plt.imshow(corrMat[j], cmap='RdBu_r')
        ax = plt.gca()
        ax.set_xticklabels([])
        ax.set_yticklabels([])
    scipy.io.savemat('/mnt/downloads/'+directory+'/PCAcorrelation-'+str(dirnumber)+'.mat', mdict={'correlations':corrMat}, oned_as='column', do_compression='true')
    plt.savefig('/mnt/downloads/'+directory+'/PCAcorrelation-'+str(dirnumber)+'.png', dpi=300, bbox_inches='tight')
    
    return
