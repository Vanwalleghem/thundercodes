%matplotlib inline
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure, show, axes, sci
from matplotlib import cm, colors
from thunder import KMeans, NMF, PCA, RegressionModel, Colorize
import numpy as np
import scipy.io
import math
from numpy import amin, amax, ravel, sum, outer, inner, mean, shape, dot, transpose, concatenate, ones, asarray
image = Colorize.image
sns.set_context('notebook')
sns.set_style('ticks')
plt.ioff()


def analysis( norm,dirnumber,directory,stimparam ):
      
	fig = figure(dpi=300)
	model = NMF(k=18, maxIter=100).fit(norm)
	plt.plot(model.h.T[:,0:3])
	plt.savefig('/mnt/downloads/'+directory+'/NMF-'+str(dirnumber)+'-1.png', dpi=300, bbox_inches='tight')
	fig = figure(dpi=300)
	plt.plot(model.h.T[:,3:6])
	plt.savefig('/mnt/downloads/'+directory+'/NMF-'+str(dirnumber)+'-2.png', dpi=300, bbox_inches='tight')
	fig = figure(dpi=300)
	plt.plot(model.h.T[:,6:9])
	plt.savefig('/mnt/downloads/'+directory+'/NMF-'+str(dirnumber)+'-3.png', dpi=300, bbox_inches='tight')
	fig = figure(dpi=300)
	plt.plot(model.h.T[:,9:12])
	plt.savefig('/mnt/downloads/'+directory+'/NMF-'+str(dirnumber)+'-4.png', dpi=300, bbox_inches='tight')
	fig = figure(dpi=300)
	plt.plot(model.h.T[:,12:15])
	plt.savefig('/mnt/downloads/'+directory+'/NMF-'+str(dirnumber)+'-5.png', dpi=300, bbox_inches='tight')
	fig = figure(dpi=300)
	plt.plot(model.h.T[:,15:18])
	plt.savefig('/mnt/downloads/'+directory+'/NMF-'+str(dirnumber)+'-6.png', dpi=300, bbox_inches='tight')
	imgs = model.w.pack()
	fig = figure(dpi=300)
# 	maps = Colorize(cmap='indexed', colors=[ "blue","green","red"], scale=2).transform(imgs)
	maps = Colorize(cmap='indexed', colors=[ "blue","green","red"], scale=2).transform(imgs[0:3])
	plt.imshow(maps);
	plt.savefig('/mnt/downloads/'+directory+'/NMFb-'+str(dirnumber)+'-1.png', dpi=300, bbox_inches='tight')
	fig = figure(dpi=300)
	maps = Colorize(cmap='indexed', colors=[ "blue","green","red"], scale=2).transform(imgs[3:6])
	plt.imshow(maps);
	plt.savefig('/mnt/downloads/'+directory+'/NMFb-'+str(dirnumber)+'-2.png', dpi=300, bbox_inches='tight')
	fig = figure(dpi=300)
	maps = Colorize(cmap='indexed', colors=[ "blue","green","red"], scale=2).transform(imgs[6:9])
	plt.imshow(maps);
	plt.savefig('/mnt/downloads/'+directory+'/NMFb-'+str(dirnumber)+'-3.png', dpi=300, bbox_inches='tight')
	fig = figure(dpi=300)
	maps = Colorize(cmap='indexed', colors=[ "blue","green","red"], scale=2).transform(imgs[9:12])
	plt.imshow(maps);
	plt.savefig('/mnt/downloads/'+directory+'/NMFb-'+str(dirnumber)+'-4.png', dpi=300, bbox_inches='tight')
	fig = figure(dpi=300)
	maps = Colorize(cmap='indexed', colors=[ "blue","green","red"], scale=2).transform(imgs[12:15])
	plt.imshow(maps);
	plt.savefig('/mnt/downloads/'+directory+'/NMFb-'+str(dirnumber)+'-5.png', dpi=300, bbox_inches='tight')
	fig = figure(dpi=300)
	maps = Colorize(cmap='indexed', colors=[ "blue","green","red"], scale=2).transform(imgs[15:18])
	plt.imshow(maps);
	plt.savefig('/mnt/downloads/'+directory+'/NMFb-'+str(dirnumber)+'-6.png', dpi=300, bbox_inches='tight')
	scipy.io.savemat('/mnt/downloads/'+directory+'/NMF-'+str(dirnumber)+'.mat', mdict={'W':imgs,'H':model.h.T}, oned_as='column', do_compression='true')

  
	yplot=int(math.ceil(float(stimparam.shape[0])/(math.trunc(stimparam.shape[0]**(0.5)))))
	xplot=math.trunc(stimparam.shape[0]**(0.5))  
	model = RegressionModel.load(test, "linear")
	global results
	results = model.fit(norm)
	betas=results.select('betas').pack()
	rsq=results.select('stats').pack()
	fig = figure(dpi=300)
	plt.subplots(xplot, yplot, sharex=True, sharey=True)
	for j in range(0,stimparam.shape[0]):
		plt.subplot(xplot, yplot, j+1);
		plt.imshow(betas[j], cmap='RdBu_r')
		ax = plt.gca()
		ax.set_xticklabels([])
		ax.set_yticklabels([])
	plt.savefig('/mnt/downloads/'+directory+'/linreg-'+str(dirnumber)+'.png', dpi=300, bbox_inches='tight')
	scipy.io.savemat('/mnt/downloads/'+directory+'/linreg-'+str(dirnumber)+'.mat', mdict={'betas':betas,'rsq':rsq}, oned_as='column', do_compression='true')

	fig = figure(dpi=300)
	plt.subplots(xplot, yplot, sharex=True, sharey=True)
	for j in range(0,stimparam.shape[0]):
		x = test[j]        
		corrs = norm.correlate(x)
		corrMat = corrs.pack()
		plt.subplot(xplot, yplot, j+1);
		plt.imshow(corrMat, cmap='RdBu_r')
		ax = plt.gca()
		ax.set_xticklabels([])
		ax.set_yticklabels([])
		scipy.io.savemat('/mnt/downloads/'+directory+'/correlation-'+str(i)+'-'+str(j)+'.mat', mdict={'correlation'+str(j)+'':corrMat}, oned_as='column', do_compression='true')
	plt.savefig('/mnt/downloads/'+directory+'/correlation-'+str(dirnumber)+'.png', dpi=300, bbox_inches='tight')
    
	return
